program             -> declaration* EOF ;

declaration         -> classDecl
                     | funDecl
                     | varDecl
                     | statement ;

classDecl           -> "class" IDENTIFIER "{" method "}" ;

method              -> ( static | function | getter )*

static              -> "class" function ;

funDecl             -> "fun" function ;

function            -> IDENTIFIER "(" parameters? ")" block ;

getter              -> IDENTIFIER block;

parameters          -> IDENTIFIER ( "," INDENTIFIER )* ;

varDecl             -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement           -> exprStmt
                     | forStmt
                     | ifStmt
                     | printStmt
                     | returnStmt
                     | whileStmt
                     | block 
                     | breakStmt ;

exprStmt            -> expression ";" ;

forStmt             -> "for" "(" ( varDecl | exprStmt | ";" )
                       expression? ";"
                       expression? ")" statement ;

ifStmt              -> "if" "(" expression ")" statement
                       ( "else" statement )? ;

printStmt           -> "print" expression ";" ;

returnStmt          -> "return" expression? ";" ;

whileStmt           -> "while" "(" expression ")" statement ;

block               -> "{" declaration* "}" ;

breakStmt           -> "break" ";" ;

expression          -> comma ;

comma               -> assignment ( "," assignment )* ;

assignment          -> ( call "." )? IDENTIFIER "=" assignment
                     | ternary ;

ternary             -> logic_or ( "?" ternary ":" ternary )? ;

logic_or            -> logic_and ( "or" logic_and )* ;
logic_and           -> equality ( "and" equality )* ;

equality            -> ( equalityNoLeft | equalityValid ) ;
equalityNoLeft      -> ( ( "!=" | "==" ) comparison )* ;
equalityValid       -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison          -> ( comparisonNoLeft | comparison ) ;
comparisonNoLeft    -> ( ( ">" | ">=" | "<" | "<=" ) term )* ;
comparisonValid     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term                -> ( termNoLeft | termValid ) ;
termNoLeft          -> ( "+" factor )* ;
termValid           -> factor ( ( "-" | "+" ) factor )* ;

factor              -> ( factorNoLeft | factorValid ) ;
factorNoLeft        -> ( ( "/" | "*" ) unary )* ;
factorValid         -> unary ( ( "/" | "*" ) unary )* ;

unary               -> ( "!" | "-" ) unary
                    | call ;

call                -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;

arguments           -> expression ( "," expression )* ;

primary             -> NUMBER | STRING | "true" | "false" | "nil"
                     | "(" expression ")" ;
                     | INDENTIFIER 
                     | funExpr;

funExpr             -> "fun" "(" parameters? ")" block ;



[a ? b : (c ? d : e)], [a ? b : (c ? d : e)]

e ? f : (g ? b : c)

a ? (e ? f : h) : g


1 - + 2 * 3

(- 1 (+ _ (* 2 3)))

(+ _ (* 2 3))


+ 2 * 3 == 6

(== (+ _ (* 2 3)) 7)

